<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
		"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
	
	<!-- namespace表示命名空间，值必须为接口的名称(包括包名) -->
	<mapper namespace="mapper.CommentMapper">
	
	<!-- boolean insertComment(Comment comment); 发布评论-->
	<insert id="insertComment" parameterType="bean.Comment">
		insert into t_comment (
		comment_id, user_id, weibo_id, comment_time, comment_content
		) values( 
		#{commentId}, #{userId},#{weiboId}, #{commentTime}, #{commentContent} 
		)
	</insert>	
	
	<!-- List<Comment> selectAll(Integer weiboId); 查询该微博下的所有评论 -->
	<select id="selectAll" resultType="bean.Comment" >
		select 
		c.comment_id as commentId, c.user_id as userId, c.weibo_id as weiboId, c.comment_time as commentTime, c.comment_content as commentContent,
		u.username, u.face
		from t_comment c
		left join t_user u on c.user_id=u.id
		where weibo_id = #{weiboId}
		order by comment_time desc
	</select>
	
	<!-- void deleteById(Integer weiboId); 删除该条评论 -->
	<delete id="deleteById">
		delete from t_comment where comment_id=#{commentId}
	</delete>
	
	<!-- Integer count(Integer weiboId); 该条微博下共有多少条评论 -->
	<select id="count" parameterType="bean.Comment" resultType="java.lang.Integer" >
    select count(*) as commentNum from t_comment
    where weibo_id = #{weiboId}
    </select>
    
    <!-- Integer[] selectByUserId(Integer userId); 当前用户收到的所有评论 -->
	<select id="selectByUserId" resultType="java.lang.Integer" >
    select 
		comment_id
		from t_comment c
		where c.weibo_id in(
			select w.id 
			from t_weibo w
			where w.user_id=#{userId}
	)
    </select>
    
	<!-- List<Comment> selectAllComments(Integer userId); 当前用户收到的所有评论 ->个人信息+微博信息 -->
	<select id="selectAllComments" resultType="bean.Comment">
		select 
		c.user_id as userId, c.weibo_id as weiboId, c.comment_time as commentTime, 
		c.comment_content as commentContent,
		u.username, u.face, u.id as nowUserId,
		lp.name as province, lc.name as city,
		w.content
		from t_comment c
		left join t_user u on u.id = c.user_id
		left join t_weibo w on w.id = c.weibo_id
		left join t_location lp on lp.id = u.province 
		left join t_location lc on lc.id = u.city
		where c.weibo_id in(
			select w.id 
			from t_weibo w
			where w.user_id=#{userId} 
		)
		order by c.comment_time desc
		
	</select>    
	
	<!-- Weibo selectByComment(Integer commentId); 根据评论id查询微博的内容 -->
	<select id="selectByComment" resultType="bean.Weibo">
	select 
		c.user_id as userId, c.weibo_id as weiboId, c.comment_time as commentTime, 
		c.comment_content as commentContent,
		u.username, u.face, u.id as nowUserId,
		w.content, w.id
		from t_comment c
		left join t_user u on u.id = c.user_id
		left join t_weibo w on w.id = c.weibo_id
		where c.comment_id=#{commentId}
		order by c.comment_time desc
	</select>
	
	</mapper>
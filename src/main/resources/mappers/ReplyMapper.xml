<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
		"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
	
	<!-- namespace表示命名空间，值必须为接口的名称(包括包名) -->
	<mapper namespace="mapper.ReplyMapper">
	
	<!-- void insert(Reply reply); 新增回复-->
	<insert id="insert" parameterType="bean.Reply">
		insert into t_reply (
		comment_id, from_id, to_id, reply_content, time
		) values( 
		#{commentId}, #{fromId},#{toId}, #{replyContent}, #{time} 
		)
	</insert>	
	
	<!-- List<Reply> select(Integer commentId); 查看该条评论的全部回复 -->
	<select id="select" resultType="bean.Reply" >
		select 
		r.reply_id as replyId, r.comment_id as commentId, r.from_id as fromId, r.to_id as toId,
		r.reply_content as replyContent, r.time,
		u1.username as fromUsername, u2.username as toUsername
		from 
		t_reply r
		left join t_user u1 on u1.id=r.from_id
		left join t_user u2 on u2.id=r.to_id
		where r.comment_id=#{commentId}
	</select>
	
	<!-- void delete(Integer replyId); 删除该条回复 -->
	<delete id="delete">
		delete from t_reply where reply_id=#{replyId}
	</delete>
	
	<!-- Integer count(Integer weiboId); 该条微博下共有多少条评论 -->
	<select id="count" parameterType="bean.Comment" resultType="java.lang.Integer" >
    select count(*) as commentNum from t_comment
    where weibo_id = #{weiboId}
    </select>
    
    <!-- Integer[] selectByUserId(Integer userId); 当前用户收到的所有评论 -->
	<select id="selectByUserId" resultType="java.lang.Integer" >
    select 
		comment_id
		from t_comment c
		where c.weibo_id in(
			select w.id 
			from t_weibo w
			where w.user_id=#{userId}
	)
    </select>
    
	<!-- List<Reply> selectAllReply(Integer userId); 当前用户收到的所有回复 ->回复信息+微博信息+个人信息 -->
	<select id="selectAllReply" resultType="bean.Reply">
		select 
		r.reply_id as replyId, r.comment_id as commentId, r.from_id as fromId, r.to_id as toId,
		r.reply_content as replyContent, r.time,
		lp1.name as fromProvince, lc1.name as fromCity,
		lp2.name as toProvince, lc2.name as toCity,
		u1.username as fromUsername, u1.face as fromFace,
		u2.username as toUsername, u2.face as toFace
		from t_reply r
		left join t_user u1 on u1.id=r.from_id
		left join t_location lp1 on lp1.id = u1.province 
		left join t_location lc1 on lc1.id = u1.city
		left join t_user u2 on u2.id=r.to_id
		left join t_location lp2 on lp2.id = u2.province 
		left join t_location lc2 on lc2.id = u2.city
		where r.to_id=#{userId}
		order by r.time desc
		
	</select>  
	
	
	
	</mapper>
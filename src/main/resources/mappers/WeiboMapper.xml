<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
		"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
	
	<!-- namespace表示命名空间，值必须为接口的名称(包括包名) -->
	<mapper namespace="mapper.WeiboMapper">
	
	
	
	<!-- boolean insert(Weibo weibo); 发布信息-->
	<insert id="insert" parameterType="bean.Weibo">
		insert into t_weibo (
		user_id,content,pic1,pic2,pic3,pic4,pic5,pic6,pic7,pic8,pic9,original,repost_id
		) values( 
		#{userId}, #{content},#{pic1}, #{pic2}, #{pic3}, #{pic4}, #{pic5}, #{pic6}, #{pic7}, #{pic8}, #{pic9}, #{original}, #{repostId} 
		)
	</insert>	
	
	<!-- List<Weibo> selectAll(); 查询所有微博 -->
	<select id="selectAll" resultType="bean.Weibo" >
		select 
		w.id,w.user_id as userId, w.post_time as postTime,w.content,w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9,w.original,w.repost_id as repostId,
		u.username, u.face, lp.name as nowProvince
		from t_weibo w
		left join t_user u on u.id = w.user_id
		left join t_location lp on lp.id = u.province
		order by post_time desc
		limit #{offset},#{count}
	</select>
	
	<!-- List<Weibo> selectById(Integer userId); 查询单个用户的所有微博 -->
	<select id="selectById" resultType="bean.Weibo">
		select
		w.id,w.user_id as userId, w.post_time as postTime,w.content,w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9,w.original,w.repost_id as repostId,
		u.username, u.face, lp.name as nowProvince
		from t_weibo w
		left join t_user u on u.id = w.user_id
		left join t_location lp on lp.id = u.province
		where w.user_id=#{userId}
		order by post_time desc
		limit #{offset},#{count}
	</select>
	
	<!-- Weibo selectByWeiboId(Integer weiboId); 查询指定微博的全部内容 -->
	<select id="selectByWeiboId" resultType="bean.Weibo">
		select
		w.id,w.user_id as userId, w.post_time as postTime,w.content,w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9,w.original,w.repost_id as repostId,
		u.username, u.face, lp.name as nowProvince
		from t_weibo w
		left join t_user u on u.id = w.user_id
		left join t_location lp on lp.id = u.province
		where w.id=#{weiboId}
		order by post_time desc
		limit #{offset},#{count}
	</select>
	
	<!-- List<Weibo> selectComment(@Param("weiboId")Integer weiboId); 查询指定微博的全部评论->根据微博id查询 -->
	<select id="selectComment" resultType="bean.Weibo">
		select
		w.id,w.user_id as userId, w.post_time as postTime,w.content,w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9,w.original,w.repost_id as repostId,
		u.username, u.face, lp.name as nowProvince,
		c.comment_id as commentId
		from t_weibo w
		left join t_user u on u.id = w.user_id
		left join t_comment c on c.weibo_id = w.id
		left join t_location lp on lp.id = u.province
		where w.id=#{weiboId}
		order by post_time desc
	</select>
	
	<!-- List<Weibo> selectByContent(Integer userId, String content); 查询当前用户-根据id 的指定微博-根据内容 -->
	<select id="selectByContent"  resultType="bean.Weibo">
		select
		w.id,w.user_id as userId, w.post_time as postTime,w.content,w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9,w.original,w.repost_id as repostId,
		u.username, u.face, lp.name as nowProvince
		from t_weibo w
		left join t_user u on u.id = w.user_id
		left join t_location lp on lp.id = u.province
		where w.user_id=#{userId} and w.content like "%"#{content}"%"
		order by w.post_time desc
		limit #{offset},#{count}
	</select>
	
	<!-- //查询指定内容的微博
	List<Weibo> selectByContents(@Param("content")String content,@Param("offset")Integer offset, @Param("count")Integer count); -->
	<select id="selectByContents"  resultType="bean.Weibo">
		select
		w.id,w.user_id as userId, w.post_time as postTime,w.content,w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9,w.original,w.repost_id as repostId,
		u.username, u.face, lp.name as nowProvince
		from t_weibo w
		left join t_user u on u.id = w.user_id
		left join t_location lp on lp.id = u.province
		where w.content like "%"#{content}"%"
		order by w.post_time desc
		limit #{offset},#{count}
	</select>
	
	
	<!-- Integer selectByContentNoPage(@Param("userId")Integer userId, @Param("content")String content); 查询当前用户-根据id 的指定微博-根据内容 -->
	<select id="selectByContentNoPage"  resultType="java.lang.Integer">
		select
		count(1)
		from t_weibo w
		where w.user_id=#{userId} and w.content like "%"#{content}"%"
	</select>
	
	<!-- //查询当指定内容的指定微博-根据内容(不分页)的数量
	Integer selectByContentsNoPage(@Param("content")String content); -->
	<select id="selectByContentsNoPage"  resultType="java.lang.Integer">
		select
		count(1)
		from t_weibo w
		where w.content like "%"#{content}"%"
	</select>
	
	<!-- Integer count(); 查询共有多少条微博 ->用于分页使用-->
	<select id="count" resultType="java.lang.Integer">
		select
		count(1)
		from t_weibo w
		order by post_time desc
	</select>
	
	<!-- Integer countByUser(Integer userId); 查询共有本人多少条微博 ->用于分页使用-->
	<select id="countByUser" resultType="java.lang.Integer">
		select
		count(1)
		from t_weibo w
		where w.user_id=#{userId}
		order by post_time desc
	</select>
	
	<!-- void delete(Integer id); 删除此条微博 -->
	<delete id="delete">
	delete from t_weibo where id=#{id}
	</delete>
	
	<!-- //查询多个用户的微博并按照时间排序
	List<Weibo> selectMany(Integer[] userIds); -->
	<select id="selectMany" parameterType="java.lang.Integer" resultType="bean.Weibo">	
	SELECT	
		w.id,w.user_id as userId, w.post_time as postTime,w.content,w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9,w.original,w.repost_id as repostId,
		u.username, u.face, lp.name as nowProvince
		from t_weibo w
		left join t_user u on u.id = w.user_id
		left join t_location lp on lp.id = u.province
	where w.user_id in
	<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">	  
	#{userId}	
	</foreach>
	order by w.post_time desc
	limit #{offset},#{count}
	</select>

<!-- 	//查询多个用户总共有多少条微博
	Integer countMany(Integer[] userIds); -->
	<select id="countMany" parameterType="java.lang.Integer" resultType="java.lang.Integer">	
	SELECT	
		count(1)
		from t_weibo w
		left join t_user u on u.id = w.user_id
	where w.user_id in
	<foreach collection="array" item="userIds" index="index" open="(" close=")" separator=",">	  
	#{userIds}	
	</foreach>
	</select>
	
	<!-- List<Weibo> selectBy(Integer userId); 查询当前用户被转发的微博-个人信息+微博内容 -->
	<select id="selectBy" resultType="bean.Weibo">
	select 
		c.user_id as userId, c.id, c.post_time as postTime, 
		c.content,
		u.username, u.face, u.id as nowUserId,
		w.content as oldContent, w.pic1,w.pic2,w.pic3,
		w.pic4,w.pic5,w.pic6,w.pic7,w.pic8,w.pic9
		from t_weibo c
		left join t_user u on u.id = c.user_id
		left join t_weibo w on w.id = c.repost_id
		where c.repost_id in(
			select w.id 
			from t_weibo w
			where w.user_id=#{userId}
		)
		order by c.post_time desc
		
	</select>
	
	
	</mapper>